import{D as l,C as p,a as w,N as m,I as E,V as f,_ as u,l as b,d as N,E as _,g as A,b as y}from"./index-c217d8b0.js";import{ee as B,ef as R,eg as g}from"./index-6231ecd3.js";import"./helperAPI-632347b0.js";const v=100,k=10;class T{constructor(e,t=v){this.sendBatchFn=e,this.maxBatchSize=t,this.pendingBatch=[]}enqueueRequest(e){return u(this,void 0,void 0,function*(){const t={request:e,resolve:void 0,reject:void 0},r=new Promise((s,n)=>{t.resolve=s,t.reject=n});return this.pendingBatch.push(t),this.pendingBatch.length===this.maxBatchSize?this.sendBatchRequest():this.pendingBatchTimer||(this.pendingBatchTimer=setTimeout(()=>this.sendBatchRequest(),k)),r})}sendBatchRequest(){return u(this,void 0,void 0,function*(){const e=this.pendingBatch;this.pendingBatch=[],this.pendingBatchTimer&&(clearTimeout(this.pendingBatchTimer),this.pendingBatchTimer=void 0);const t=e.map(r=>r.request);return this.sendBatchFn(t).then(r=>{e.forEach((s,n)=>{const i=r[n];if(i.error){const o=new Error(i.error.message);o.code=i.error.code,o.data=i.error.data,s.reject(o)}else s.resolve(i.result)})},r=>{e.forEach(s=>{s.reject(r)})})})}}class d extends B{constructor(e){const t=d.getApiKey(e.apiKey),r=d.getAlchemyNetwork(e.network),s=d.getAlchemyConnectionInfo(r,t,"http");e.url!==void 0&&(s.url=e.url),s.throttleLimit=e.maxRetries;const n=_[r];super(s,n),this.apiKey=e.apiKey,this.maxRetries=e.maxRetries,this.batchRequests=e.batchRequests;const i=Object.assign(Object.assign({},this.connection),{headers:Object.assign(Object.assign({},this.connection.headers),{"Alchemy-Ethers-Sdk-Method":"batchSend"})}),o=a=>g(i,JSON.stringify(a));this.batcher=new T(o),this.modifyFormatter()}static getApiKey(e){if(e==null)return l;if(e&&typeof e!="string")throw new Error(`Invalid apiKey '${e}' provided. apiKey must be a string.`);return e}static getNetwork(e){return typeof e=="string"&&e in p?p[e]:R(e)}static getAlchemyNetwork(e){if(e===void 0)return w;if(typeof e=="number")throw new Error(`Invalid network '${e}' provided. Network must be a string.`);if(!Object.values(m).includes(e))throw new Error(`Invalid network '${e}' provided. Network must be one of: ${Object.values(m).join(", ")}.`);return e}static getAlchemyConnectionInfo(e,t,r){const s=r==="http"?A(e,t):y(e,t);return{headers:E?{"Alchemy-Ethers-Sdk-Version":f}:{"Alchemy-Ethers-Sdk-Version":f,"Accept-Encoding":"gzip"},allowGzip:!0,url:s}}detectNetwork(){const e=Object.create(null,{detectNetwork:{get:()=>super.detectNetwork}});return u(this,void 0,void 0,function*(){let t=this.network;if(t==null&&(t=yield e.detectNetwork.call(this),!t))throw new Error("No network detected");return t})}_startPending(){b("WARNING: Alchemy Provider does not support pending filters")}isCommunityResource(){return this.apiKey===l}send(e,t){return this._send(e,t,"send")}_send(e,t,r,s=!1){const n={method:e,params:t,id:this._nextId++,jsonrpc:"2.0"},i=Object.assign({},this.connection);if(i.headers["Alchemy-Ethers-Sdk-Method"]=r,this.batchRequests||s)return this.batcher.enqueueRequest(n);this.emit("debug",{action:"request",request:N(n),provider:this});const o=["eth_chainId","eth_blockNumber"].indexOf(e)>=0;if(o&&this._cache[e])return this._cache[e];const a=g(this.connection,JSON.stringify(n),q).then(h=>(this.emit("debug",{action:"response",request:n,response:h,provider:this}),h),h=>{throw this.emit("debug",{action:"response",error:h,request:n,provider:this}),h});return o&&(this._cache[e]=a,setTimeout(()=>{this._cache[e]=null},0)),a}modifyFormatter(){this.formatter.formats.receiptLog.removed=e=>{if(typeof e=="boolean")return e}}}function q(c){if(c.error){const e=new Error(c.error.message);throw e.code=c.error.code,e.data=c.error.data,e}return c.result}export{d as AlchemyProvider};
